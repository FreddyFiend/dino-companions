// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  name     String?
  hashedRt String?
  products Product[]
  roles    Roles[]
  reviews  Reviews[]
  Order    Order[]
  address  Address?
}

model Roles {
  id     String @id @default(uuid())
  name   String @default("user")
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model Product {
  id             String       @id @default(uuid())
  title          String
  imageUrl       String
  imageThumb     String
  imageDeleteUrl String
  description    String?
  published      Boolean?     @default(false)
  seller         User         @relation(fields: [sellerId], references: [id])
  sellerId       String
  quantity       Int
  price          Float
  rating         Float        @default(0)
  totalReviews   Int          @default(0)
  reviews        Reviews[]
  orderItems     OrderItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  id        String  @id @default(uuid())
  text      String
  rating    Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([productId, userId])
}

model OrderItems {
  id        String  @id @default(uuid())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Address {
  id            String  @id @default(uuid())
  country       String
  city          String
  streetAddress String
  address       Order[]
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  total       Float
  items       OrderItems[]
  isCompleted Boolean      @default(false)
  address     Address?     @relation(fields: [addressId], references: [id])
  addressId   String?

  createdAt DateTime @default(now())
}

// model Product {
//   id        Int      @id @default(autoincrement())
//   name      String
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Order {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   items     OrderItem[]
// }

// model OrderItem {
//   id        Int     @id @default(autoincrement())
//   quantity  Int
//   price     Float
//   product   Product @relation(fields: [productId], references: [id])
//   productId Int
//   order     Order   @relation(fields: [orderId], references: [id])
//   orderId   Int
// }
